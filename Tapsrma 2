import hashlib
import time

# Блок құрылымын анықтау
class Block:
    def __init__(self, index, timestamp, data, previous_hash):
        self.index = index
        self.timestamp = timestamp
        self.data = data
        self.previous_hash = previous_hash
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        # Блок хэші барлық деректерден есептеледі
        block_data = f"{self.index}{self.timestamp}{self.data}{self.previous_hash}"
        return hashlib.sha256(block_data.encode()).hexdigest()

# Генезис блогын құру
def create_genesis_block():
    return Block(0, time.time(), "Генезис блогы", "0")

# Жаңа блок құру
def create_new_block(previous_block, data):
    index = previous_block.index + 1
    timestamp = time.time()
    previous_hash = previous_block.hash
    return Block(index, timestamp, data, previous_hash)

# Блокчейннің негізгі жұмысы
if __name__ == "__main__":
    # Генезис блогын жасаймыз
    genesis_block = create_genesis_block()
    print("Генезис блогы:")
    print(f"Индекс: {genesis_block.index}")
    print(f"Уақыт таңбасы: {genesis_block.timestamp}")
    print(f"Деректер: {genesis_block.data}")
    print(f"Алдыңғы блоктың хэші: {genesis_block.previous_hash}")
    print(f"Хэш: {genesis_block.hash}")
    print()

    # Жаңа блок қосу
    second_block = create_new_block(genesis_block, "Екінші блок деректері")
    print("Екінші блок:")
    print(f"Индекс: {second_block.index}")
    print(f"Уақыт таңбасы: {second_block.timestamp}")
    print(f"Деректер: {second_block.data}")
    print(f"Алдыңғы блоктың хэші: {second_block.previous_hash}")
    print(f"Хэш: {second_block.hash}")
